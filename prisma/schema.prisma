generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  name              String?
  email             String?       @unique
  phoneNumber       String        @unique
  role              String        @default("user")
  createdAt         DateTime      @default(now()) @map("created_at")
  isProfileComplete Boolean       @default(false)
  cartItems         CartItem[]    @relation("UserCartItems")
  orders            Order[]
  payments          Payment[]
  addresses         UserAddress[]
}

model UserAddress {
  id           String  @id @default(uuid())
  userId       String
  addressLine1 String  @map("address_line1")
  addressLine2 String? @map("address_line2")
  city         String
  state        String
  postalCode   String  @map("postal_code")
  country      String
  isDefault    Boolean @map("is_default")
  fullName     String  @map("full_name")
  phoneNumber  String  @map("phone_number")
  orders       Order[]
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
}

model SubCategory {
  id         String    @id @default(uuid())
  name       String
  categoryId String
  products   Product[]
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Product {
  id            String                      @id @default(uuid())
  name          String
  description   String
  price         Decimal
  stock         Int
  imageUrl      String                      @map("image_url")
  isActive      Boolean                     @default(true) @map("is_active")
  createdAt     DateTime                    @default(now()) @map("created_at")
  subCategoryId String
  cartItems     CartItem[]
  orderItems    OrderItem[]
  subCategory   SubCategory                 @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  combinations  ProductVariantCombination[]
  variantTypes  VariantType[]
  productImage  ProductImage[]
}

model VariantType {
  id        String         @id @default(uuid())
  name      String
  productId String
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  values    VariantValue[]
}

model VariantValue {
  id                String             @id @default(uuid())
  value             String
  variantTypeId     String
  combinationValues CombinationValue[]
  variantType       VariantType        @relation(fields: [variantTypeId], references: [id], onDelete: Cascade)
}

model ProductVariantCombination {
  id         String             @id @default(uuid())
  productId  String
  price      Decimal
  stock      Int
  imageUrl   String
  values     CombinationValue[]
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model CombinationValue {
  id             String                    @id @default(uuid())
  combinationId  String
  variantValueId String
  combination    ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  variantValue   VariantValue              @relation(fields: [variantValueId], references: [id])
}

model CartItem {
  id        String   @id @default(uuid())
  userId    String
  productId String?  // Make optional since we can have medicine items
  medicineId String? // Add optional medicine reference
  quantity  Int
  addedAt   DateTime @default(now()) @map("added_at")
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  medicine  Medicine? @relation(fields: [medicineId], references: [id], onDelete: Cascade)
  user      User     @relation("UserCartItems", fields: [userId], references: [id], onDelete: Cascade)

  // Note: Ensure at application level that either productId OR medicineId is set, but not both
}

model Order {
  id            String      @id @default(uuid())
  userId        String
  addressId     String
  status        String
  paymentMethod String      // Add payment method field
  totalAmount   Decimal     @map("total_amount")
  createdAt     DateTime    @default(now()) @map("created_at")
  address       UserAddress @relation(fields: [addressId], references: [id])
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]
  payments      Payment[]
}

model OrderItem {
  id            String                     @id @default(uuid())
  orderId       String
  productId     String
  combinationId String?                    // Add field for variant tracking
  quantity      Int
  price         Decimal
  status        OrderStatus                @default(PENDING)
  reason        String?                    // Reason for return/cancellation
  order         Order                      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product       Product                    @relation(fields: [productId], references: [id])
  combination   ProductVariantCombination? @relation(fields: [combinationId], references: [id])
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

model Payment {
  id                String   @id @default(cuid())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  orderId           String
  amount            Float
  currency          String   @default("INR")
  status            String
  provider          String
  providerPaymentId String?
  metadata          Json?
  userId            String
  order             Order    @relation(fields: [orderId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@index([orderId])
  @@index([userId])
}
model ProductImage {
  id         String   @id @default(uuid())
  url     String
  key        String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  createdAt  DateTime @default(now())
}

model Medicine {
  id              String   @id @default(uuid())
  name            String
  price           Decimal
  isDiscontinued  Boolean  @default(false)
  manufacturerName String
  type            String
  packSizeLabel   String
  composition1    String?
  composition2    String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  cartItems       CartItem[] // Add relation to cart items

  @@index([id])
  @@index([name])
  @@index([manufacturerName])
  @@index([type])
}