generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String        @id @default(uuid())
  name              String?
  email             String?       @unique
  phoneNumber       String        @unique
  role              String        @default("user")
  createdAt         DateTime      @default(now()) @map("created_at")
  isProfileComplete Boolean       @default(false)
  
  orders            Order[]
  cartItems         CartItem[]    @relation("UserCartItems")
  addresses         UserAddress[]
}

model UserAddress {
  id           String  @id @default(uuid())
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  fullName     String  @map("full_name")
  phoneNumber  String  @map("phone_number")
  addressLine1 String  @map("address_line1")
  addressLine2 String? @map("address_line2")
  city         String
  state        String
  postalCode   String  @map("postal_code")
  country      String
  isDefault    Boolean @map("is_default")

  orders       Order[]
}

model Category {
  id            String        @id @default(uuid())
  name          String        @unique
  subCategories SubCategory[]
}

model SubCategory {
  id          String        @id @default(uuid())
  name        String
  category    Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String
  products    Product[]
}

model Product {
  id           String                     @id @default(uuid())
  name         String
  description  String
  price        Decimal
  stock        Int
  imageUrl     String                     @map("image_url")
  isActive     Boolean                    @default(true) @map("is_active")
  createdAt    DateTime                   @default(now()) @map("created_at")
  subCategory  SubCategory                @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  subCategoryId String

  variantTypes VariantType[]
  combinations ProductVariantCombination[]

  cartItems    CartItem[]
  orderItems   OrderItem[]
}

model VariantType {
  id        String        @id @default(uuid())
  name      String
  product   Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  values    VariantValue[]
}

model VariantValue {
  id            String        @id @default(uuid())
  value         String
  variantType   VariantType   @relation(fields: [variantTypeId], references: [id], onDelete: Cascade)
  variantTypeId String
  combinationValues CombinationValue[]
}

model ProductVariantCombination {
  id         String             @id @default(uuid())
  product    Product            @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  values     CombinationValue[]
  price      Decimal
  stock      Int
  imageUrl   String
}

model CombinationValue {
  id              String                  @id @default(uuid())
  combination     ProductVariantCombination @relation(fields: [combinationId], references: [id], onDelete: Cascade)
  combinationId   String
  variantValue    VariantValue            @relation(fields: [variantValueId], references: [id])
  variantValueId  String
}


model CartItem {
  id        String   @id @default(uuid())
  user      User     @relation("UserCartItems", fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  quantity  Int
  addedAt   DateTime @default(now()) @map("added_at")
}

model Order {
  id          String      @id @default(uuid())
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  address     UserAddress @relation(fields: [addressId], references: [id])
  addressId   String
  status      String
  totalAmount Decimal     @map("total_amount")
  createdAt   DateTime    @default(now()) @map("created_at")

  orderItems  OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal
}